# -*- coding: utf-8 -*-
"""Bifurcacion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FybYKjhhU887_wLy3mo4lHu-Nfk5fpIi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

PARQUET = "2024-10-01_performance_mobile_tiles.parquet"

df = pd.read_parquet(PARQUET)

cols = set(df.columns)

col_tests  = next((c for c in ["tests", "num_tests", "n_tests"] if c in cols), None)

# quita NaNs
df = df[["avg_d_kbps"] + ([col_tests] if col_tests else [])].dropna()

# Convierte de kbps a Mbps
df["download_mbps"] = df["avg_d_kbps"] / 1000.0

if col_tests:
    w = np.clip(1 + np.log10(df[col_tests].clip(lower=1)), 1, 5).round().astype(int)
    df = df.loc[df.index.repeat(w)].reset_index(drop=True)


# Atenuación de outliers recorte por cuantiles 1% y 99%
low, high = df["download_mbps"].quantile([0.01, 0.99])
df["download_mbps_clip"] = df["download_mbps"].clip(lower=low, upper=high)

v = df["download_mbps_clip"].values

# Normaliza a [0,1] para poder mapear linealmente a un rango de r
# (se suma 1e-12 al denominador para evitar división por cero si max = min)
v_norm = (v - v.min()) / (v.max() - v.min() + 1e-12)

r_min, r_max = 2.5, 4.0
r_vals = r_min + v_norm * (r_max - r_min)

def logistic_bifurcation(r_list, x0=0.5, iters=1200, last=400):
    R, X = [], []
    for r in r_list:
        x = x0
        for i in range(iters):
            x = r * x * (1 - x)
            if i >= (iters - last):  # guarda solo la cola para ver los atractores
                R.append(r)
                X.append(x)
    return np.array(R), np.array(X)

# Toma hasta 20k valores de r al azar (sin reemplazo) para graficar
N = 20000 if len(r_vals) > 20000 else len(r_vals)
rng = np.random.default_rng(42)  # semilla reproducible
r_sample = r_vals[rng.choice(len(r_vals), size=N, replace=False)]

# Ejecuta el mapa logístico y recolecta puntos del atractor
R, X = logistic_bifurcation(r_sample)


plt.figure(figsize=(9,6))
plt.scatter(R, X, s=0.1, alpha=0.6)
plt.title("Bifurcación (mapa logístico) – r desde Ookla Mobile Download")
plt.xlabel("r (mapeado desde Mbps)")
plt.ylabel("x")
plt.tight_layout()

out_png = Path("bifurcacion_ookla_mobile.png")
plt.savefig(out_png, dpi=300)
plt.show()

print(f"Listo: {out_png.resolve()}")

df